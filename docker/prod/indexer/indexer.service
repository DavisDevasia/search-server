#!/usr/bin/env python

import sys
import os
import subprocess
import shutil
import time
import datetime
import errno
import json

SEARCH_SERVER_LIST_FILE = "/code/consul_indexer_config.ini"
SEARCH_SERVER_RESTART_SERVER_DELAY = 900
SEARCH_SERVER_CHILL_TIME_BETWEEN_RUNS = 900

RECORDING_INDEX_MAX_AGE = 60 * 60 * 24


def check_age_of_index(indexes_dir, version, index_type):
    dest = os.path.join(indexes_dir, version)
    try:
        dirs = [f for f in os.listdir(dest) if os.path.isdir(os.path.join(dest, f))]
        dirs.sort(reverse=True)
        latest = dirs[0]
        index_dir = os.path.join(dest, latest, "%s_index" % index_type)
    except OSError:
        return int(time.time())
    except IndexError:
        return int(time.time())

    # check to see when the index dir was last modified
    try:
        ts = int(os.path.getmtime(index_dir))
    except OSError, e:
        return int(time.time())

    return int(time.time()) - ts


def copy_index(indexes_dir, version, index_type, dest):
    src = os.path.join(indexes_dir, version)
    try:
        dirs = [f for f in os.listdir(src) if os.path.isdir(os.path.join(src, f))]
        dirs.sort(reverse=True)
        latest = dirs[0]
        index_dir = os.path.join(src, latest, "%s_index" % index_type)
    except OSError:
        return int(time.time())
    except IndexError:
        return int(time.time())

    try:
        os.path.join(dest, "%s_index" % index_type)
        os.mkdir(dest)
        subprocess.check_call(["cp", "-rav", index_dir, dest])
    except OSError as e:
        print "Cannot copy index from %s to %s: " % (index_dir, dest) + str(e)
        sys.exit(-9)
    except subprocess.CalledProcessError as e:
        print "Cannot copy index from %s to %s: " % (index_dir, dest) + str(e)
        sys.exit(-10)


def read_config_file():

    f = open(SEARCH_SERVER_LIST_FILE, "r")
    if not f:
        return []

    data = {}
    for line in f.readlines():
        line = line.strip()
        kv = line.split("=")
        k = kv[0]
        if len(kv) == 1:
            v = ""
        else:
            v = kv[1]
        if v.endswith(","):
            v = v[:-1]
        data[k] = v

    f.close()
    return data


def main():
    try:
        search_home = os.environ['SEARCH_HOME']
    except AttributeError:
        print "Environment var SEARCH_HOME must be set for this script."
        sys.exit(-1)

    try:
        indexes_version = os.environ['INDEXES_VERSION']
    except AttributeError:
        print "Environment var INDEXES_VERSION must be set for this script."
        sys.exit(-2)

    in_prog_dir = os.path.join(search_home, "data", "in-progress")
    indexes_dir = os.path.join(search_home, "data")

    try:
        subprocess.check_call(["rsync", "--config=/etc/rsyncd.conf", "--daemon"])
    except subprocess.CalledProcessError as e:
        print "Cannot start rsync daemon: " + str(e)
        sys.exit(-3)

    while True:
        try:
            shutil.rmtree(in_prog_dir)
        except OSError, e:
            print "Failed to clean up in-progress dir. ignoring."

        try:
            os.makedirs(in_prog_dir)
        except OSError, e:
            if e.errno != errno.EEXIST:
                print "Failed to create in-progress dir %s: %s" % (in_progress_dir, e)
                sys.exit(-4)

        os.chdir(in_prog_dir)

        index_list = "area,artist,cdstub,instrument,label,place,editor,event,release,releasegroup,cdstub,annotation,series,work,tag,url"
        if check_age_of_index(indexes_dir, indexes_version, "recording") > RECORDING_INDEX_MAX_AGE:
            index_list += ",recording"
        else:
            copy_index(indexes_dir, indexes_version, "recording", os.path.join(in_prog_dir, "data"))

        config_data = read_config_file()
        os.environ['POSTGRES_HOST'] = config_data['pg_host']
        os.environ['POSTGRES_PORT'] = config_data['pg_port']
        os.environ['POSTGRES_DB'] = config_data['pg_database']
        os.environ['POSTGRES_USER'] = config_data['pg_user']
        os.environ['POSTGRES_PASSWD'] = config_data['pg_passwd']

        try:
            subprocess.check_call([os.path.join(search_home, "bin", "build-indexes.sh"), index_list])
        except OSError as e:
            print "Cannot build indexes: " + str(e)
            sys.exit(-5)
        except subprocess.CalledProcessError as e:
            print "Cannot build indexes: " + str(e)
            sys.exit(-6)

        os.chdir(search_home)

        # re-read the config file, it may have changed since the last call
        config_data = read_config_file()
        delay = 0
        sys.stderr.write("Starting restarts at %s\n" % (datetime.datetime.fromtimestamp(time.time()).strftime('%Y-%m-%d %H:%M:%S.%f')))
        for server in config_data['search-servers'].split(","):
            if not server:
                continue
            restart_file = os.path.join(in_prog_dir, "data", "restart-" + server)
            f = open(restart_file, "w")
            restart = int(time.time() + delay)
            f.write("%d\n" % restart)
            sys.stderr.write("write restart timestamp %s for %s\n" % (datetime.datetime.fromtimestamp(restart).strftime('%Y-%m-%d %H:%M:%S.%f'), server))
            delay += SEARCH_SERVER_RESTART_SERVER_DELAY
            f.close()

        rotate(indexes_version, os.path.join(in_prog_dir, "data"), indexes_dir)

        # Wait for search servers to sync and rotate, then start the next run
        sys.stderr.write("%s: Sleep for %d seconds, because I'm lazy and I need a break.\n" % (time.time(), SEARCH_SERVER_CHILL_TIME_BETWEEN_RUNS))
        time.sleep(SEARCH_SERVER_CHILL_TIME_BETWEEN_RUNS)


def rotate(version, new_set, indexes):
    ts = int(time.time())
    dest = os.path.join(indexes, version)
    try:
        os.makedirs(dest)
    except OSError, e:
        if e.errno != errno.EEXIST:
            print "Failed to create dest dir %s: %s" % (dest, e)
            sys.exit(-7)

    dest = os.path.join(dest, str(ts))
    try:
        os.rename(new_set, dest)
    except OSError, e:
        print "Failed to move new set to indexes dir %s: %s" % (dest, e)
        sys.exit(-8)

    indexes_dir = os.path.join(indexes, version)

    # Remove older data sets
    dirs = [f for f in os.listdir(indexes_dir) if os.path.isdir(os.path.join(indexes_dir, f))]
    dirs.sort(reverse=True)
    for dir in dirs[2:]:
        index_dir = os.path.join(indexes_dir, dir)
        print "Remove old %s" % index_dir
        shutil.rmtree(index_dir)


if __name__ == "__main__":
    main()
